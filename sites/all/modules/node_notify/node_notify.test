<?php

/**
 * @file
 * Test Node Notify functionality and integration with Comment Notify.
 */

class NodeNotifyTestCase extends DrupalWebTestCase {

  protected $type = NULL;
  protected $node = NULL;

  protected $unprivileged = NULL;
  protected $privileged = NULL;
  protected $admin = NULL;

  /**
   * Description.
   */
  public static function getInfo() {
    return array(
      'name' => t('Node Notify tests'),
      'description' => t('Test Node Notify behaviour and integration with Comment Notify.'),
      'group' => t('Node Notify'),
    );
  }

  /**
   * Set up state before testing.
   */
  protected function setUp() {
    parent::setUp('node_notify', 'comment_notify');

    $this->type = $this->createContentType();

    $type = $this->type->type;
    $permissions = array(
      'access content',
      "create $type content",
      "edit own $type content",
      "delete own $type content",
    );

    $this->unprivileged = $this->drupalCreateUser($permissions);

    $permissions[] = 'subscribe to node';
    $permissions[] = 'access comments';
    $permissions[] = 'post comments';
    $permissions[] = 'skip comment approval';
    $permissions[] = 'subscribe to comments';
    $permissions[] = 'access user profiles';
    $this->privileged = $this->drupalCreateUser($permissions);

    $permissions[] = 'administer node notify';
    $permissions[] = 'administer node subscriptions';
    $permissions[] = "edit any $type content";
    $permissions[] = "delete any $type content";
    $permissions[] = 'administer comments';
    $this->admin = $this->drupalCreateUser($permissions);

    $this->node = $this->drupalCreateNode(array(
      'type' => $this->type->type,
      'comment' => COMMENT_NODE_OPEN,
      'uid' => $this->privileged->uid,
    ));
  }


  /**
   * Enabling content types for Node Notify.
   *
   * Disabling/enabling content type for node notify will hide/show
   * subscription widgets on node forms accordingly.
   */
  protected function testNodeNotifyEnabledTypes() {
    $this->drupalLogin($this->privileged);

    $this->disableContentTypes();
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertNoPattern('/edit-node-notify-subscribe/', 'Node Notify disabled for content type.');

    $this->enableContentType($this->type);
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertPattern('/edit-node-notify-subscribe/', 'Node Notify enabled for content type.');

    $this->drupalLogout();
  }

  /**
   * Subscription link and widget for anonymous user.
   *
   * Anonymous user with "subscribe to node" permission granted sees
   * subscription widget on node form and subscription link when visiting node
   * page.
   */
  protected function testNodeNotifyAnonymous() {
    $type = $this->type->type;
    $nid = $this->node->nid;
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("create $type content"));

    $this->drupalLogout();
    $this->enableContentType($this->type);

    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertNoPattern('/edit-node-notify-subscribe/', 'Node Notify disabled for anonymous user.');

    $this->drupalGet('node/' . $nid);
    $this->assertNoPattern("/node\/$nid\/subscribe/", 'No Subscribe link for anonymous user.');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertPattern('/edit-node-notify-subscribe/', 'Node Notify enabled for anonymous user.');

    $this->drupalGet('node/' . $nid);
    $this->assertPattern("/node\/$nid\/subscribe/", 'Subscribe link is displayed for anonymous user.');

    user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array(
      'subscribe to node', "create $type content",
    ));
  }

  /**
   * Access to node/N/subscribe.
   *
   * node/N/subscribe is forbidden without "subscribe to node" and accessible
   * with it. Anonymous user with this permission sees subscription
   * field. Registered users are subscribed at once and redirected.
   */
  protected function testNodeNotifySubscribeLink() {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $email = $this->getRandomEmail();
    $this->enableContentType($this->type);

    $this->drupalLogout();

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(403, 'Forbidden');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalLogin($this->admin);
    $this->drupalLogout();

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible');
    $this->assertPattern('/node-notify-subscribe-form/', 'Subscription form is displayed for anonymous user.');

    $edit['email'] = $email;
    $this->drupalPost(NULL, $edit, t('Subscribe'));
    $this->assertUrl("node/$nid", array(), 'Redirected to node page.');
    $this->assertTrue(node_notify_is_subscribed($nid, 0, $email), 'Anonymous user subscribed with node/N/subscribe form.');

    $this->drupalGet("node/$nid/unsubscribe");
    $this->assertResponse(403, 'Anonymous user is not allowed to access node/N/unsubscribe URL.');

    user_role_revoke_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node'));

    $this->drupalLogin($this->unprivileged);

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(403, 'Forbidden for unprivileged user.');

    $this->drupalLogout();

    $this->drupalLogin($this->privileged);

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible to privileged user.');

    $this->drupalGet("node/$nid/subscribe");
    $this->assertResponse(200, 'Accessible');
    $this->assertNoPattern('/node-notify-subscribe-form/', 'Subscription form is not displayed for privileged user.');
    $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
    $this->assertTrue(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is subscribed.');

    $this->drupalGet("node/$nid/unsubscribe");
    $this->assertUrl("node/$nid", array(), 'Privileged user should be redirected back to node page.');
    $this->assertPattern('/Unsubscribed from/', 'Privileged user should see "Unsubscribe" message.');
    $this->assertFalse(node_notify_is_subscribed($nid, $this->privileged->uid), 'Privileged user is unsubscribed.');

    $this->drupalLogout();
  }

  /**
   * Subscription widget type.
   *
   * Anonymous user should see text field to input email address on node
   * form. Registered user should see checkbox.
   */
  protected function testNodeNotifyNodeFormFieldType() {
    $type = $this->type->type;
    $nid = $this->node->nid;

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("create $type content", 'subscribe to node'));
    $this->enableContentType($this->type);

    $this->drupalLogin($this->privileged);
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", NULL,
      'Checkbox for registerd user.'
    );

    $this->drupalLogout();
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='text' and @id='edit-node-notify-subscribe']", NULL,
      'Text field for anonymous user.'
    );
  }

  /**
   * Subscription field/checkbox value on node form.
   *
   * - Show different labels for checkbox on node form when author or
   *   administrator is editing node created by registered user.
   * - Anonymous user sees no widget when editing node.
   * - User without "administer node subscriptions" sees no widget.
   */
  protected function testNodeNotifyNodeFormFieldValue() {
    $type = $this->type->type;
    $nid = $this->node->nid;

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array("edit any $type content", 'subscribe to node'));
    $this->enableContentType($this->type);

    $this->drupalLogin($this->privileged);
    node_notify_subscribe($nid, $this->privileged->uid);
    $this->drupalGet("node/$nid/edit");
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", '1',
      'Checkbox checked for author.'
    );
    $this->assertText(
      t('Receive comment notifications by email'),
      'Different label if editing is done by the author.'
    );
    $this->drupalLogout();

    $this->drupalLogin($this->admin);
    $this->drupalGet("node/$nid/edit");
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe']", '1',
      'Checkbox checked for admin.'
    );
    $this->assertText(
      t('Author receives comment notifications by email'),
      'Different label if editing is done not by the author.'
    );

    $this->drupalLogout();
    $this->drupalGet("node/$nid/edit");
    $this->assertNoFieldById('edit-node-notify-subscribe', NULL,
      'No field displayed for anonymous user when editing existing node.'
    );

    $tmp_user = $this->drupalCreateUser(array("edit any $type content"));

    $this->drupalLogin($tmp_user);
    $this->drupalGet("node/$nid/edit");
    $this->assertNoFieldById('edit-node-notify-subscribe', NULL,
      'No field displayed for user with no "administer node subscription" permission when editing existing node.'
    );
  }

  /**
   * Test that "ticked by default" feature works.
   */
  protected function testNodeNotifyNodeFormDefaultValue() {
    $this->enableContentType($this->type);
    $this->setDefaltValueForType($this->type, FALSE);

    $this->drupalLogin($this->privileged);
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe' and not(@checked='checked')]", NULL,
      'Subscription checkbox not checked.'
    );

    $this->setDefaltValueForType($this->type, TRUE);
    $this->drupalGet('node/add/' . $this->type->type);
    $this->assertFieldByXpath(
      "//input[@type='checkbox' and @id='edit-node-notify-subscribe' and @checked='checked']", NULL,
      'Subscription checkbox checked by default.'
    );
  }

  /**
   * Node Notify notifications.
   *
   * - Denied when anonymous has no 'subscribe to node' permission.
   * - Skipped when comment and node author is the same.
   * - Postponed until comment is published.
   * - Sent to anonymous with right permissions.
   */
  protected function testNodeNotifyNotifications() {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $this->enableContentType($this->type);
    $email = $this->getRandomEmail();

    // This skips permission checking.
    node_notify_subscribe($nid, 0, $email);
    node_notify_subscribe($nid, $this->privileged->uid);

    $this->drupalLogin($this->privileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName());

    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_DENIED, 'Notification marked as denied.');

    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, 'Notification skipped -- subscriber is commenter.');

    $this->drupalLogout();
    variable_set('comment_anonymous_' . $type, '1');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('post comments'));
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName(), array('mail' => $email, 'name' => $this->randomName()), NULL, FALSE);
    $notification = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertFalse((bool) $notification, 'Notification does not exist -- comment is not published.');

    $this->drupalLogin($this->admin);
    // $this->drupalGet('admin/content/comment/approval');
    $this->drupalPost('admin/content/comment/approval', array(
      'comments[' . $data['id'] . ']' => TRUE,
      'operation' => 'publish',
    ), t('Update'));
    $this->drupalLogout();

    $notification = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue((bool) $notification, 'Notification exists -- comment was published.');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('skip comment approval'));
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName(), array('mail' => $email, 'name' => $this->randomName()));
    $notification = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($notification->notified == NODE_NOTIFY_SKIPPED, 'Notification skipped -- subscribe is commenter (anonymous).');

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('subscribe to node', 'access content'));
    $this->drupalLogin($this->privileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName());
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, 'Notification marked as sent.');
    $this->assertMail('to', $email, "Notification mail sent to anonymous subscriber.");
  }

  /**
   * Integration with Comment Notify.
   */
  protected function testNodeNotifyCommentNotifyIntegration() {
    $type = $this->type->type;
    $nid = $this->node->nid;
    $this->enableContentType($this->type);
    $email = $this->getRandomEmail();

    variable_set('comment_notify_node_types', array($type => $type));
    variable_set('comment_anonymous_' . $type, '1');

    $perms = array(
      'subscribe to node',
      'post comments',
      'skip comment approval',
      'subscribe to comments',
    );
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);

    comment_notify_set_user_notification_setting($this->admin->uid, 1);
    $this->node->uid = $this->admin->uid;
    node_save($this->node);

    node_notify_subscribe($nid, 0, $email);
    node_notify_subscribe($nid, $this->privileged->uid);

    $this->drupalLogin($this->unprivileged);
    $this->drupalGet("node/$nid");
    $data = $this->postComment($this->node, $this->randomName(), $this->randomName(), array('notify_type' => 1, 'notify' => TRUE));
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#1 Notification to anonymous sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#1 Notification to user sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertFalse((boolean) $note, '#1 User is not subscribed 1.');
    $note = node_notify_get_notification($data['id'], $nid, $this->admin->uid);
    $this->assertFalse((boolean) $note, '#1 User is not subscribed 2.');
    $this->drupalLogout();

    node_notify_subscribe($nid, $this->unprivileged->uid);

    $this->drupalLogin($this->privileged);
    $cid = $data['id'];
    $this->drupalGet("comment/reply/$nid/$cid");
    $data = $this->postComment(NULL, $this->randomName(), $this->randomName(), array('notify_type' => 2, 'notify' => TRUE));
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#2 Notification handled by Comment Notify.');
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, '#2 Notification sent.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, '#2 Notification skipped -- commenter is subscriber.');
    $this->drupalLogout();

    node_notify_subscribe($nid, $this->admin->uid);

    // Anonymous.
    $cid = $data['id'];
    $this->drupalGet("comment/reply/$nid/$cid");
    $data = $this->postComment(NULL, $this->randomName(), $this->randomName(), array('name' => $this->randomName(), 'mail' => $email));
    $note = node_notify_get_notification($data['id'], $nid, $this->unprivileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 1.');
    $note = node_notify_get_notification($data['id'], $nid, $this->privileged->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 2.');
    $note = node_notify_get_notification($data['id'], $nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SKIPPED, '#3 Notification skipped -- commenter is subscriber.');
    $note = node_notify_get_notification($data['id'], $nid, $this->admin->uid);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT_BY_COMMENT_NOTIFY, '#3 Notification handled by Comment Notify 3.');
  }

  /**
   * Issue with Comment Notify integration.
   *
   * Issue #2: original poster is not getting notified when anonymous user
   * comments on anonymous post.
   */
  protected function testNodeNotifyIssue2() {
    $this->enableContentType($this->type);
    $email = $this->getRandomEmail();
    do {
      $email1 = $this->getRandomEmail();
    } while ($email == $email1);

    // variable_set('comment_notify_node_types', array($type => $type));
    variable_set('comment_anonymous_' . $this->type->type, '1');

    $perms = array(
      'access content',
      'post comments', 'skip comment approval',
      'subscribe to comments', 'subscribe to node',
      // 'access devel information',
    );
    // user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $perms);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $perms);

    $this->drupalLogout();

    $node = $this->drupalCreateNode(array(
      'type' => $this->type->type,
      'uid' => 0,
      'comment' => COMMENT_NODE_OPEN,
    ));
    node_notify_subscribe($node->nid, 0, $email);

    $this->drupalGet("node/$node->nid");
    $data = $this->postComment(
      $node, $this->randomName(), $this->randomName(),
      array('mail' => $email1, 'name' => $this->randomName())
    );
    $this->assertFalse($email == $email1, 'Emails are not the same.');

    $count = db_query('SELECT COUNT(*) FROM {node_notify_subscription}')->fetchColumn();
    $this->assertTrue($count == 1, 'One subscription exists.');

    $count = db_query('SELECT COUNT(*) FROM {node_notify_notification}')->fetchColumn();
    $this->assertTrue($count == 1, 'One notification processed.');

    $note = node_notify_get_notification($data['id'], $node->nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, 'Anonymous poster notified of follow up comment.');

    $data = $this->postComment(
      $node, $this->randomName(), $this->randomName(),
      array(
        'mail' => $email1,
        'name' => $this->randomName(),
        'notify_type' => 1,
        'notify' => TRUE,
      )
    );
    $count = db_query('SELECT COUNT(*) FROM {node_notify_notification}')->fetchColumn();
    $this->assertTrue($count == 2, 'Second notification processed.');

    $note = node_notify_get_notification($data['id'], $node->nid, 0, $email);
    $this->assertTrue($note->notified == NODE_NOTIFY_SENT, 'Anonymous poster notified of second comment.');
  }

  /**
   * Display no subscription widget when node is authored by anonymous user.
   */
  protected function testNodeNotifyIssue3() {
    $type = $this->type->type;
    $nid = $this->node->nid;

    $this->node->uid = 0;
    node_save($this->node);

    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
      "edit any $type content",
      'subscribe to node',
      'administer node subscriptions',
    ));

    $this->enableContentType($this->type);
    $this->drupalLogout();

    $this->drupalGet("node/$nid/edit");
    $this->assertNoFieldById('edit-node-notify-subscribe', NULL,
      'No field displayed for anonymous user when editing existing node by anonymous user.'
    );
  }

  /**
   * Cron clean up of expired notifications.
   */
  protected function testNodeNotifyCron() {
    $this->enableContentType($this->type);

    node_notify_subscribe($this->node->nid, $this->privileged->uid);
    node_notify_cron();
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Subscription exists.');

    variable_set('node_notify_expires', '+1 day');
    node_notify_cron();
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Subscription still exists - cron not enabled.');

    variable_set('node_notify_cron', TRUE);
    node_notify_cron();
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Subscription still exists - subscription active.');

    $this->drupalLogin($this->privileged);
    $this->postComment($this->node, $this->randomName(), $this->randomName());
    $count = db_select('node_notify_notification')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Notification created.');

    node_notify_unsubscribe($this->node->nid, $this->privileged->uid);
    node_notify_cron();
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 0, 'Subscription removed.');
    $count = db_select('node_notify_notification')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 0, 'Notification removed.');
  }

  /**
   * Remove subscription when node or user is removed.
   */
  protected function testNodeNotifyUserAndNodeHooks() {
    $this->enableContentType($this->type);
    node_notify_subscribe($this->node->nid, $this->unprivileged->uid);

    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Subscription exists.');

    user_delete($this->unprivileged->uid);
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 0, 'Subscription removed.');

    node_notify_subscribe($this->node->nid, $this->privileged->uid);
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Another subscription created.');

    $this->drupalLogin($this->privileged);
    $this->postComment($this->node, 'Subject', 'Comment body');
    $count = db_select('node_notify_notification')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 1, 'Notification exists.');

    node_delete($this->node->nid);
    $count = db_select('node_notify_subscription')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 0, 'Another subscription removed.');

    $count = db_select('node_notify_notification')->countQuery()->execute()->fetchColumn();
    $this->assertTrue($count == 0, 'Notification removed.');
  }

  /**
   * Test for issue #1950050.
   */
  protected function testNodeNotifyUserSubscriptionsTab() {
    $testuser = $this->drupalCreateUser(array(
      'access content',
      'subscribe to node',
    ));

    $user_url = 'user/' . $testuser->uid;
    $user_subscriptions = $user_url . '/subscriptions';

    $this->drupalLogin($this->unprivileged);
    $this->drupalGet($user_url);
    $this->assertText(t('Access denied'), 'Access denied to user page');
    $this->drupalGet($user_subscriptions);
    $this->assertText(t('Access denied'), 'Access denied to user subscriptions');

    $this->drupalLogout();
    $this->drupalLogin($this->privileged);
    $this->drupalGet($user_url);
    $this->assertText(
      $testuser->name,
      'Access granted to user page for user with "access user profiles" permission.'
    );
    $this->drupalGet($user_subscriptions);
    $this->assertText(
      t('Access denied'),
      'Access denied to user subscriptions for user with "access user profiles" permission.'
    );

    $this->drupalLogout();
    $this->drupalLogin($this->admin);
    $this->drupalGet($user_url);
    $this->assertText($testuser->name, 'Access granted to user page');
    $this->drupalGet($user_subscriptions);
    $this->assertText(t('No subscriptions yet.'), 'Access granted to user subscriptions');
  }

  /**
   * Generate random email address with example.com as domain part.
   *
   * @return string
   *   Random email address.
   */
  protected function getRandomEmail() {
    return $this->randomName() . '@example.com';
  }

  /**
   * Creates node_notify_type content type.
   *
   * @return object
   *   Content type object.
   */
  protected function createContentType() {
    $settings = array(
      'type' => 'node_notify_type',
      'title_label' => 'Title',
      'body_label' => 'Body',
    );
    $content_type = $this->drupalCreateContentType($settings);
    return $content_type;
  }

  /**
   * Enables subscriptions on content type.
   *
   * @param object $type
   *   Content type object.
   */
  protected function enableContentType($type) {
    $values = variable_get('node_notify_enabled_types', array());
    $values[$type->type] = $type->type;
    variable_set('node_notify_enabled_types', $values);
  }

  /**
   * Set default value of subscription for content type.
   *
   * @param object $type
   *   Content type object.
   * @param bool $value
   *   Default value.
   */
  protected function setDefaltValueForType($type, $value) {
    $values = variable_get('node_notify_enabled_by_default', array());
    $values[$type->type] = $value;
    variable_set('node_notify_enabled_by_default', $values);
  }

  /**
   * Disables any enabled content types.
   */
  protected function disableContentTypes() {
    variable_set('node_notify_enabled_types', array());
  }

  /**
   * Post a comment on given node.
   *
   * Copied from Comment Notify test case and slightly modified.
   *
   * @param object $node
   *   Node to post on or NULL to use current page.
   * @param string $subject
   *   Subject of a comment.
   * @param string $comment
   *   Comment text.
   * @param array $notify
   *   Parameters for Comment Notify.
   * @param array $contact
   *   Comment contact details (name, mail).
   *
   * @return array
   *   If comment was posted, associative array with id, subject, and comment
   *   keys.
   */
  protected function postComment($node, $subject, $comment, $notify = NULL, $contact = NULL, $assert_comment_visible = TRUE) {
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['subject'] = $subject;
    $edit['comment_body[' . $langcode . '][0][value]'] = $comment;

    if ($notify !== NULL && is_array($notify)) {
      $edit += $notify;
    }

    if ($contact !== NULL && is_array($contact)) {
      $edit += $contact;
    }

    $url = $node ? 'node/' . $node->nid : NULL;
    $this->drupalPost($url, $edit, t('Save'));

    $match = array();
    // Get comment ID.
    preg_match('/#comment-([^"]+)/', $this->getURL(), $match);

    // Get comment.
    if (!empty($match[1])) {
      if ($assert_comment_visible) {
        if ($subject) {
          $this->assertText($subject, 'Comment subject posted.');
        }
        $this->assertText($comment, 'Comment body posted.');
      }
      $this->assertTrue((!empty($match) && !empty($match[1])), t('Comment id found.'));
    }

    if (isset($match[1])) {
      return array(
        'id' => $match[1],
        'subject' => $subject,
        'comment' => $comment,
      );
    }
  }
}
